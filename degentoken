// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

contract HatToken is ERC20, Ownable, ERC20Burnable {
    event LogMessage(string message);

    struct Hat {
        string name;
        uint256 price;
        uint256 quantity;
    }

    mapping(string => Hat) public hats;

    constructor() ERC20("HatToken", "HAT") Ownable(msg.sender) {
      
    }

    function mint(address account, uint256 amount) public onlyOwner {
        _mint(account, amount);
    }

    function burn_(uint256 amount) public payable {
        require(balanceOf(msg.sender) >= amount, "Insufficient hats for burning");
        _burn(msg.sender, amount);
        emit LogMessage("Hats burned successfully");
    }

    function transfer_(address recipient, uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "Insufficient hats for transferring");
        _transfer(msg.sender, recipient, amount);
    }

    function redeemHat(string memory hatType) external payable {
        require(bytes(hatType).length > 0, "Hat type cannot be empty");

        // Initialize hats with specific prices and quantities
        if (hats["BaseballCap"].price == 0) {
            hats["BaseballCap"] = Hat("BaseballCap", 50 ether, 100);
        }

        if (hats["Beanie"].price == 0) {
            hats["Beanie"] = Hat("Beanie", 30 ether, 200);
        }

        if (hats["TopHat"].price == 0) {
            hats["TopHat"] = Hat("TopHat", 100 ether, 50);
        }

        if (hats["CowboyHat"].price == 0) {
            hats["CowboyHat"] = Hat("CowboyHat", 80 ether, 75);
        }

        Hat storage hat = hats[hatType];

        require(msg.value >= hat.price, "Insufficient payment for buying hat");
        require(hat.quantity > 0, "Out of stock");

        address user = msg.sender;
        uint256 change = msg.value - hat.price;

        _mint(user, 1);
        hat.quantity -= 1;

        if (change > 0) {
            payable(user).transfer(change);
        }

        emit LogMessage("Hat purchased successfully");
    }

    function changeHatQuantity(string memory hatType, uint256 newQuantity) external onlyOwner {
        require(bytes(hatType).length > 0, "Hat type cannot be empty");
        require(newQuantity >= 0, "New quantity must be greater than or equal to zero");

        Hat storage hat = hats[hatType];
        hat.quantity = newQuantity;

        emit LogMessage("Hat quantity changed successfully");
    }
}
